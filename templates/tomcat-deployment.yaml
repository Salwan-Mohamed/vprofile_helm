apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.namespaceConfig.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    environment: {{ .Values.global.environment }}
    app: {{ .Values.app.name }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        app.kubernetes.io/name: {{ .Values.app.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z {{ .Values.db.name }}-service {{ .Values.db.service.port }}; do echo "waiting for mysql"; sleep 5; done;']
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z {{ .Values.rabbitmq.name }}-service {{ .Values.rabbitmq.service.port }}; do echo "waiting for rabbitmq"; sleep 5; done;']
      - name: wait-for-memcached
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z {{ .Values.memcached.name }}-service {{ .Values.memcached.service.port }}; do echo "waiting for memcached"; sleep 5; done;']
      containers:
      - name: {{ .Values.app.name }}
        image: {{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        ports:
        - containerPort: 8080
          name: app-port
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db-password
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: rabbitmq-user
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: rabbitmq-password
        resources:
          requests:
            memory: {{ .Values.app.resources.requests.memory | quote }}
            cpu: {{ .Values.app.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.app.resources.limits.memory | quote }}
            cpu: {{ .Values.app.resources.limits.cpu | quote }}
        livenessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: app-config
          mountPath: /usr/local/tomcat/application.properties
          subPath: application.properties
      volumes:
      - name: app-config
        configMap:
          name: vproapp-config
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.name }}-service
  namespace: {{ .Values.namespaceConfig.name }}
  labels:
    app: {{ .Values.app.name }}
    app.kubernetes.io/name: {{ .Values.app.name }}-service
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    environment: {{ .Values.global.environment }}
spec:
  selector:
    app: {{ .Values.app.name }}
  ports:
  - port: 8080
    targetPort: app-port
{{- if .Values.app.autoscaling.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Values.app.name }}-hpa
  namespace: {{ .Values.namespaceConfig.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.app.name }}-hpa
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    environment: {{ .Values.global.environment }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.app.name }}
  minReplicas: {{ .Values.app.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.app.autoscaling.maxReplicas }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.app.autoscaling.targetCPUUtilizationPercentage }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.app.autoscaling.targetMemoryUtilizationPercentage }}
{{- end }}